/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */
apply from: './libraries.gradle'

buildscript {
    repositories {
        mavenCentral()
    	maven { url "https://repo.spring.io/libs-milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.3.RELEASE")
    }
}

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
    
repositories {
    maven { url "https://repo.spring.io/libs-milestone" }
    mavenCentral()
    mavenLocal()
}

jar {
    version = '1.0'
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }
}

subprojects {
	repositories {
        mavenCentral()
    	maven { url "https://repo.spring.io/libs-milestone" }
    }
    
	apply plugin: 'java'
	apply plugin: 'groovy'
	apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
	
	
	ext.releaseBuild = version.endsWith('RELEASE')
    ext.snapshotBuild = version.endsWith('SNAPSHOT')
    version = '1.0.0'
	
	sourceCompatibility = 1.8
    targetCompatibility = 1.8
    
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:Dalston.SR4"
        }
    }
    
	eclipse {
		jdt {
			sourceCompatibility = 1.8
			targetCompatibility = 1.8
		}
		classpath {
			downloadSources = true
			downloadJavadoc = true
		}
	}
	// source code configuration
	sourceSets {
		main {
			java { srcDirs = ['src/main/java'] }
			resources { srcDirs = ['src/main/resources'] }
		}
		test {
			java { srcDirs = ['src/test/java'] }
			resources { srcDirs = ['src/test/resources'] }
		}
	}
	
	task mkdirs4javaProjects {
		sourceSets*.java.srcDirs*.each {item -> 
			if(!item.exists()) {
				item.mkdirs()
			}
		}
		sourceSets*.resources.srcDirs*.each {item -> 
			if(!item.exists()) {
				item.mkdirs()
			}
		}
	}
}


project(":eurekaserver") {
	description = "spring-cloud eureka-server"
    
    dependencies {
		// This dependency is exported to consumers, that is to say found on their compile classpath.
		//api 'org.apache.commons:commons-math3:3.6.1'

		// This dependency is used internally, and not exposed to consumers on their own compile classpath.
		//implementation 'com.google.guava:guava:21.0'
	
        compile(libraries.springBootWeb)
        compile(libraries.springCloudEurekaServer)
        
        testCompile(libraries.springBootTest)
    }
}
project(":eurekaclient01") {
	description = "first spring-cloud eureka-client."
	
    dependencies {
        compile(libraries.springBootWeb)
        compile(libraries.springCloudEureka)
//      compile(libraries.springCloudConsulDiscovery)
        
        testCompile(libraries.springBootTest)
    }
}
project(":eurekaclient02") {
	description = "second spring-cloud eureka-client."
	
    dependencies {
        compile(libraries.httpClient)
        compile(libraries.springBootWeb)
        compile(libraries.springCloudEureka)
        
        testCompile(libraries.springBootTest)
    }
}


project(":serviceribbon") {
    description = "rest+ribbon 实现负载均衡客户端,可以很好的控制http和tcp的一些行为,Feign默认集成了ribbon."

    dependencies {
        compile(libraries.springBootWeb)
        compile(libraries.springActuator)
        compile(libraries.springCloudEureka)
        compile(libraries.springCloudRibbon)
        compile(libraries.springCloudHystrix)
        compile(libraries.springCloudHystrixDashboard)
        
        testCompile(libraries.springBootTest)
    }    
}

project(":servicefeign") {
    description = "Feign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用Feign 注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。"
    
    dependencies {
        compile(libraries.springBootWeb)
        compile(libraries.springActuator)
        compile(libraries.springCloudEureka)
        compile(libraries.springCloudFeign)
        compile(libraries.springCloudHystrixDashboard)
        
        testCompile(libraries.springBootTest)
    }
}

project(":servicezuul") {
    description = "路由器"
    
    dependencies {
        compile(libraries.springBootWeb)
        compile(libraries.springActuator)
        compile(libraries.springCloudEureka)
        compile(libraries.springCloudZuul)
        
        testCompile(libraries.springBootTest)
    }
}

project(":configserver") {
    description = "spring-cloud config server project."

    dependencies {
        compile(libraries.springBootWeb)
        compile(libraries.springActuator)
        compile(libraries.springCloudEureka)
        compile(libraries.springCloudConfigServer)

        testCompile(libraries.springBootTest)
    }
}

project(":configclient") {
    description = "spring-cloud config client project."

    dependencies {
        compile(libraries.springBootWeb)
        compile(libraries.springActuator)
        compile(libraries.springCloudEureka)
        compile(libraries.springCloudConfig)

        testCompile(libraries.springBootTest)
    }
}